const {{ name }} = require('./{{ properCase name }}.model');
const APIError = require('../../helpers/APIError');
const httpStatus = require('http-status');

/**
 * Load {{ properCase name }} and append to req.
 *  * @property {number} req.query.id - Number of {{ properCase name }}s to be skipped.
 * @returns {{{ name }}}
 */
function load(req, res, next, id) {
  {{ name }}.findOne({
    where: {
      id,
    },
  })
    .then(({{ properCase name }}) => {
      if (!{{ properCase name }}) {
        return next(new APIError('{{ name }} not exist', httpStatus.BAD_REQUEST, true));
      }
      req.{{ properCase name }} = {{ properCase name }}; // eslint-disable-line no-param-reassign
      return next();
    })
    .catch(e => next(e));
}

/**
 * Get {{ properCase name }}
 * @returns {{{ name }}}
 */
function get(req, res) {
  return res.json(req.{{ properCase name }});
}

/**
 * Create new {{ properCase name }}
 * @property {string} req.body.firstName - The username of {{ properCase name }}.
 * @property {string} req.body.lastName - The mobileNumber of {{ properCase name }}.
 * @returns {{{ name }}}
 */
function create(req, res, next) {
  const { firstName, lastName, userName, password } = req.body;

  {{ name }}.create({ firstName, lastName, userName, password })
    .then(jane => res.json(jane))
    .catch(err => next(err));
}

/**
 * Update existing {{ properCase name }}
 * @property {string} req.body.firstName - The username of {{ properCase name }}.
 * @property {string} req.body.lastName - The mobileNumber of {{ properCase name }}.
 * @returns {{{ name }}}
 */
function update(req, res, next) {
  const { firstName, lastName, userName, password } = req.body;
  const {{ properCase name }} = req.{{ properCase name }};

  {{ properCase name }}.firstName = firstName;
  {{ properCase name }}.lastName = lastName;
  {{ properCase name }}.userName = userName;
  {{ properCase name }}.password = password;

  {{ properCase name }}
    .save()
    .then(savedUser => res.json(savedUser))
    .catch(e => next(e));
}

/**
 * Get {{ properCase name }} list.
 * @property {number} req.query.offset - Number of {{ properCase name }}s to be skipped.
 * @property {number} req.query.limit - Limit number of {{ properCase name }}s to be returned.
 * @returns { {{ name }}[] }
 */
function list(req, res, next) {
  const { limit = 50, offset = 0, where, order } = req.query;
  {{ name }}.findAll({
    limit: Number(limit),
    offset: Number(offset),
    where,
    order,
  })
    .then({{ properCase name }}s => res.json({{ properCase name }}s))
    .catch(e => next(e));
}

/**
 * Delete {{ properCase name }}.
 * @returns {{{ name }}}
 */
function remove(req, res, next) {
  const {{ properCase name }} = req.{{ properCase name }};
  {{ properCase name }}
    .destroy()
    .then(deletedUser => res.json(deletedUser))
    .catch(e => next(e));
}

module.exports = {
  load,
  get,
  create,
  update,
  list,
  remove,
};
